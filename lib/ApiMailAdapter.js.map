{"version":3,"sources":["../src/ApiMailAdapter.js"],"names":["path","require","fs","promises","Mustache","MailAdapter","Errors","ApiMailAdapter","options","sender","templates","apiCallback","Error","configurationInvalid","Object","keys","length","templatesInvalid","apiCallbackNoFunction","key","_validateTemplate","link","appName","user","_sendMail","templateName","recipient","subject","text","html","placeholders","extra","direct","email","userEmail","get","undefined","templateConfigurationNoName","template","noTemplateWithName","assign","noRecipient","message","from","to","username","_createApiData","apiData","placeholderCallback","localeCallback","locale","_validateUserLocale","placeholderCopy","callbackPlaceholders","_validatePlaceholders","_loadFile","subjectPath","toString","_fillPlaceholders","textPath","htmlPath","payload","replyTo","_getLocalizedFilePath","localizedFilePath","readFile","data","render","templateContentPathInvalid","templateCallbackNoFunction","localeCallbackNoFunction","validUserVars","constructor","isValid","filePath","file","basename","basePath","dirname","localePath","join","_fileExists","localeFileExists","languagePath","split","languageFileExists","access","module","exports"],"mappings":"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","sourcesContent":["const path = require('path');\nconst fs = require('fs').promises;\nconst Mustache = require('mustache');\nconst MailAdapter = require('./MailAdapter');\nconst Errors = require('./Errors');\n\n/**\n * @class ApiMailAdapter\n * @description An email adapter for Parse Server to send emails via mail provider APIs.\n */\nclass ApiMailAdapter extends MailAdapter {\n  /**\n   * Creates a new mail adapter.\n   * @param {Object} options The configuration options.\n   */\n  constructor(options) {\n\n    // Get parameters\n    const { sender, templates, apiCallback } = options || {};\n\n    // Ensure required parameters are set\n    if (!sender) {\n      throw Errors.Error.configurationInvalid;\n    }\n\n    // Ensure email templates are set\n    if (!templates || Object.keys(templates).length === 0) {\n      throw Errors.Error.templatesInvalid;\n    }\n\n    // Ensure API callback is set\n    if (typeof apiCallback !== 'function') {\n      throw Errors.Error.apiCallbackNoFunction;\n    }\n\n    // Initialize\n    super(options);\n\n    // Validate templates\n    for (const key in templates) {\n      this._validateTemplate(templates[key]);\n    }\n\n    // Set properties\n    this.sender = sender;\n    this.templates = templates;\n    this.apiCallback = apiCallback\n  }\n\n  /**\n   * @function sendPasswordResetEmail\n   * @description Sends a password reset email.\n   * @param {String} link The password reset link.\n   * @param {String} appName The app name.\n   * @param {String} user The Parse User.\n   * @returns {Promise<Any>} The mail provider API response.\n   */\n  sendPasswordResetEmail({ link, appName, user }) {\n    return this._sendMail({\n      templateName: 'passwordResetEmail',\n      link,\n      appName,\n      user\n    });\n  }\n\n  /**\n   * @function sendVerificationEmail\n   * @description Sends a verification email.\n   * @param {String} link The email verification link.\n   * @param {String} appName The app name.\n   * @param {String} user The Parse User.\n   * @returns {Promise<Any>} The mail provider API response.\n   */\n  sendVerificationEmail({ link, appName, user }) {\n    return this._sendMail({\n      templateName: 'verificationEmail',\n      link,\n      appName,\n      user\n    });\n  }\n\n  /**\n   * @function sendMail\n   * @description Sends an email.\n   * @param {String} [sender] The email from address.\n   * @param {String} recipient The email recipient; if set overrides the email address of the `user`.\n   * @param {String} [subject] The email subject.\n   * @param {String} [text] The plain-text email content.\n   * @param {String} [html] The HTML email content.\n   * @param {String} [templateName] The template name.\n   * @param {Object} [placeholders] The template placeholders.\n   * @param {Object} [extra] Any additional variables to pass to the mail provider API.\n   * @param {Parse.User} [user] The Parse User that the is the recipient of the email.\n   * @returns {Promise<Any>} The mail provider API response.\n   */\n  async sendMail({ sender, recipient, subject, text, html, templateName, placeholders, extra, user }) {\n    return await this._sendMail({\n      sender,\n      recipient,\n      subject,\n      text,\n      html,\n      templateName,\n      placeholders,\n      extra,\n      user,\n      direct: true\n    });\n  }\n\n  /**\n   * @function _sendMail\n   * @description Sends an email.\n   * @param {Object} email The email to send.\n   * @returns {Promise} The mail provider API response.\n   */\n  async _sendMail(email) {\n\n    // Define parameters\n    let message;\n    const user = email.user;\n    const userEmail = user\n      ? user.get('email') || user.get('username')\n      : undefined;\n    const templateName = email.templateName;\n\n    // If template name is not set\n    if (!templateName && !email.direct) {\n      throw Errors.Error.templateConfigurationNoName;\n    }\n\n    // Get template\n    const template = this.templates[templateName];\n\n    // If template does not exist\n    if (!template && !email.direct) {\n      throw Errors.Error.noTemplateWithName(templateName);\n    }\n\n    // Add template placeholders;\n    // Placeholders sources override each other in this order:\n    // 1. Placeholders set in the template (default)\n    // 2. Placeholders set in the email\n    // 3. Placeholders returned by the placeholder callback\n    let placeholders = {};\n\n    // Add template placeholders\n    if (template) {\n      placeholders = Object.assign(placeholders, template.placeholders || {});\n    }\n\n    // If the email is sent directly via Cloud Code\n    if (email.direct) {\n\n      // If recipient is not set\n      if (!email.recipient && !userEmail) {\n        throw Errors.Error.noRecipient;\n      }\n\n      // Add placeholders specified in email\n      Object.assign(placeholders, email.placeholders || {});\n\n      // Set message properties\n      message = Object.assign(\n        {\n          from: email.sender || this.sender,\n          to: email.recipient || userEmail,\n          subject: email.subject,\n          text: email.text,\n          html: email.html\n        },\n        email.extra || {}\n      );\n\n    } else {\n      // Get email parameters\n      const { link, appName } = email;\n\n      // Add default placeholders for templates\n      Object.assign(placeholders, {\n        link,\n        appName,\n        email: userEmail,\n        username: user.get('username')\n      });\n\n      // Set message properties\n      message = {\n        from: this.sender,\n        to: userEmail\n      };\n    }\n\n    // Create API data\n    const apiData = await this._createApiData({ message, template, placeholders, user });\n\n    // Send email\n    return await this.apiCallback(apiData);\n  }\n\n  /**\n   * @typedef {Object} CreateApiDataResponse\n   * @property {Object} payload The generic API payload.\n   * @property {String} payload.from The sender email address.\n   * @property {String} payload.to The recipient email address.\n   * @property {String} payload.replyTo The reply-to address.\n   * @property {String} payload.subject The subject.\n   * @property {String} payload.text The plain-text content.\n   * @property {String} payload.html The HTML content.\n   * @property {String} payload.message The MIME content.\n   * @property {String} [locale] The user locale, if it has been determined via the\n   * locale callback.\n   */\n  /**\n   * @function _createApiData\n   * @description Creates the API data, includes the payload and optional meta data.\n   * @param {Object} options The payload options.\n   * @param {Object} options.message The message to send.\n   * @param {Object} options.template The email template to use.\n   * @param {Object} [options.placeholders] The email template placeholders.\n   * @param {Object} [options.user] The Parse User who is the email recipient.\n   * @returns {Promise<CreateApiDataResponse>} The API data.\n   */\n  async _createApiData(options) {\n    let { message } = options;\n    const { template = {}, user, placeholders = {} } = options;\n    const { placeholderCallback, localeCallback } = template;\n    let locale;\n\n    // If locale callback is set\n    if (localeCallback) {\n\n      // Get user locale\n      locale = await localeCallback(user);\n      locale = this._validateUserLocale(locale);\n    }\n\n    // If placeholder callback is set\n    if (placeholderCallback) {\n\n      // Copy placeholders to prevent any direct changes\n      const placeholderCopy = Object.assign({}, placeholders);\n\n      // Add placeholders from callback\n      let callbackPlaceholders = await placeholderCallback({ user, locale, placeholders: placeholderCopy });\n      callbackPlaceholders = this._validatePlaceholders(callbackPlaceholders);\n      Object.assign(placeholders, callbackPlaceholders);\n    }\n\n    // Get subject content\n    const subject = message.subject || await this._loadFile(template.subjectPath, locale);\n\n    // If subject is available\n    if (subject) {\n\n      // Set email subject\n      message.subject = subject.toString('utf8');\n\n      // Fill placeholders in subject\n      message.subject = this._fillPlaceholders(message.subject, placeholders);\n    }\n\n    // Get text content\n    const text = message.text || await this._loadFile(template.textPath, locale);\n\n    // If text content is available\n    if (text) {\n\n      // Set email text content\n      message.text = text.toString('utf8');\n\n      // Fill placeholders in text\n      message.text = this._fillPlaceholders(message.text, placeholders);\n    }\n\n    // Get HTML content\n    const html = message.html || (template.htmlPath ? await this._loadFile(template.htmlPath, locale) : undefined);\n\n    // If HTML content is available\n    if (html) {\n\n      // Set email HTML content\n      message.html = html.toString('utf8');\n\n      // Fill placeholders in HTML\n      message.html = this._fillPlaceholders(message.html, placeholders);\n    }\n\n    // Append any additional message properties;\n    // Extras sources override each other in this order:\n    // 1. Extras set in the template (default)\n    // 2. Extras set when sending directly via sendMail()\n    message = Object.assign({}, template.extra, message);\n\n    // Assemble payload\n    const payload = {\n      from: message.from,\n      to: message.to,\n      subject: message.subject,\n      text: message.text\n    };\n\n    // Add optional message properties\n    if (message.html) {\n      payload.html = message.html;\n    }\n    if (message.replyTo) {\n      payload.replyTo = message.replyTo;\n    }\n\n    return { payload, locale };\n  }\n\n  /**\n   * @function _loadFile\n   * @description Loads a file's content.\n   * @param {String} path The file path.\n   * @param {String} locale The locale if a localized version of the file should be\n   * loaded if available, or `undefined` if no localization should occur.\n   * @returns {Promise<Buffer>} The file content.\n   */\n  async _loadFile(path, locale) {\n\n    // If localized file should be returned\n    if (locale) {\n\n      // Get localized file path\n      const localizedFilePath = await this._getLocalizedFilePath(path, locale);\n      path = localizedFilePath;\n    }\n\n    // Get file content\n    const data = await fs.readFile(path);\n    return data;\n  }\n\n  /**\n   * @function _fillPlaceholders\n   * @description Substitutes placeholders in a template with their values.\n   * @param {String} template The template with placeholders, e.g. {{placeholder}}.\n   * @param {Object} placeholders A map of placeholder keys with values.\n   * @returns {String} The template with filled in placeholders.\n   */\n  _fillPlaceholders(template, placeholders) {\n    return Mustache.render(template, placeholders)\n  }\n\n  /**\n   * @function _validateTemplate\n   * @description Validates a template.\n   * @param {Object} template The template to validate.\n   * @returns {}\n   */\n  _validateTemplate(template) {\n\n    // Get template properties\n    const { subjectPath, textPath, htmlPath, placeholderCallback, localeCallback } = template;\n\n    // Validate paths\n    if (typeof subjectPath !== 'string' || typeof textPath !== 'string' || (htmlPath && typeof htmlPath !== 'string')) {\n      throw Errors.Error.templateContentPathInvalid;\n    }\n\n    // Validate placeholder callback\n    if (placeholderCallback && typeof placeholderCallback !== 'function') {\n      throw Errors.Error.templateCallbackNoFunction;\n    }\n\n    // Validate locale callback\n    if (localeCallback && typeof localeCallback !== 'function') {\n      throw Errors.Error.localeCallbackNoFunction;\n    }\n  }\n\n  /**\n   * @function _validatePlaceholders\n   * @description Validates the template placeholders.\n   * @param {Object} placeholders The template placeholders.\n   * @returns {Object} The validated (cleaned) placeholders.\n   */\n  _validatePlaceholders(placeholders) {\n    const validUserVars = placeholders && placeholders.constructor === Object;\n    return validUserVars ? placeholders : {};\n  }\n\n  /**\n   * @function _validateUserLocale\n   * @description Validates the user locale callback result.\n   * @param {String} locale The user locale.\n   * @returns {String|undefined} Returns the locale or undefined if the locale is invalid.\n   */\n  _validateUserLocale(locale) {\n    const isValid = typeof locale === 'string' && locale.length >= 2;\n    return isValid ? locale : undefined;\n  }\n\n  /**\n   * @function getLocalizedFilePath\n   * @description Returns a localized file path matching a given locale.\n   *\n   * Localized files are placed in sub-folders of the given path, for example:\n   *\n   * root/\n   * ├── base/                    // base path to files\n   * │   ├── example.html         // default file\n   * │   └── de/                  // de language folder\n   * │   │   └── example.html     // de localized file\n   * │   └── de-AT/               // de-AT locale folder\n   * │   │   └── example.html     // de-AT localized file\n   *\n   * Files are matched with the user locale in the following order:\n   * 1. Locale match, e.g. locale `de-AT` matches file in folder `de-AT`.\n   * 2. Language match, e.g. locale `de-AT` matches file in folder `de`.\n   * 3. Default match: file in base folder is returned.\n   *\n   * @param {String} filePath The file path.\n   * @param {String} locale The locale to match.\n   * @returns {Promise<String>} The localized file path, or the original file path\n   * if a localized file could not be determined.\n   */\n  async _getLocalizedFilePath(filePath, locale) {\n    // Get file name and base path\n    const file = path.basename(filePath);\n    const basePath = path.dirname(filePath);\n\n    // If locale is not set return default file\n    if (!locale) { return filePath; }\n\n    // Check file for locale exists\n    const localePath = path.join(basePath, locale, file);\n    const localeFileExists = await this._fileExists(localePath);\n\n    // If file for locale exists return file\n    if (localeFileExists) { return localePath; }\n\n    // Check file for language exists\n    const languagePath = path.join(basePath, locale.split(\"-\")[0], file);\n    const languageFileExists = await this._fileExists(languagePath);\n\n    // If file for language exists return file\n    if (languageFileExists) { return languagePath; }\n\n    // Return default file path\n    return filePath;\n  }\n\n  /**\n   * @function fileExists\n   * @description Checks whether a file exists.\n   * @param {String} path The file path.\n   * @returns {Promise<Boolean>} Is true if the file can be accessed, false otherwise.\n   */\n  async _fileExists(path) {\n    try {\n      await fs.access(path);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\nmodule.exports = ApiMailAdapter;\n"],"file":"ApiMailAdapter.js"}